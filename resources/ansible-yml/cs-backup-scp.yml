---
# This playbook backups all mysql databases into separate files.
# and scp to target host
- name: backup my-sql
  hosts: all
  gather_facts: yes
  become: yes
  remote_user: ubuntu
  vars:
    - db_host: "127.0.0.1"
    - db_user: "root"
    - db_pass: "secret"
    - backup_scp_host: "pkc-back.org"
    - backup_scp_identity_src: "~/.ssh/OregonCluster.pem"
    - backup_scp_user: 'ubuntu'
    - backup_scp_dst: '/home/ubuntu/cs/mountpoint/backup_restore/mariadb'

  tasks:
    - name: "apt-get update"
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: "install mysql client"
      apt:
        name: ['mysql-client']
        state: present

    # - name: Make sure pymysql is present
    #   pip:
    #     name: pymysql
    #     state: present      

    # mhaviz, added image backup file
    - name: copy common script cs-backup-image
      copy:
        src: ./resources/script/cs-backup-image.sh
        dest: "{{ mysql_backup_script_dir }}/cs-backup-image.sh"
        mode: '0755'

  roles:
    #
    #
    # Ansible role to create backup script -- my_wiki database
    #
    - role: freehck.script_mysql_backup
      # mysql connection parameters
      mysql_backup_host: "{{ db_host }}"
      mysql_backup_user: "{{ db_user }}"
      mysql_backup_pass: "{{ db_pass }}"
      mysql_backup_db: "my_wiki"            # <<<<<
      # backend storage parameters
      mysql_backup_backend_use_s3: no
      mysql_backup_backend_use_scp: yes
      mysql_backup_scp_host: "{{ backup_scp_host }}"
      mysql_backup_scp_identity_src: "{{ backup_scp_identity_src }}"
      mysql_backup_scp_user: 'ubuntu'
      mysql_backup_scp_dst: '/home/ubuntu/cs/mountpoint/backup_restore/mariadb'
      # gzip and encrypt
      mysql_backup_gzip: yes
      mysql_backup_encrypt_aes: no
      # mysql_backup_encrypt_aes_key_src: "{{ playbook_dir }}/files/aes256.bkp.key"
      # other
      mysql_backup_save_facts_about_custom_script: yes
      mysql_backup_logfile: "/var/log/mysql-backup.log"
      tags: [ backup, mysql ]
      mysql_backup_archive_prefix: "{{ inventory_hostname }}-{{ mysql_backup_db }}"
    #
    #
    # Ansible role to create cronjob
    #
    - role: freehck.crontask
      crontask_file: "backup-my-wiki"
      crontask_name: "backup database my-wiki"
      crontask_hour: "*"
      crontask_minute: "1"
      crontask_job: "{{ mysql_backup_last_generated_custom_script }}"
      crontask_user: "root"
      crontask_commented_out: "no"
      crontask_state: "present"
      tags: [ backup, mysql ]
    #
    #
    # Ansible role to create backup script -- matomo
    #
    - role: freehck.script_mysql_backup
      # mysql connection parameters
      mysql_backup_host: "{{ db_host }}"
      mysql_backup_user: "{{ db_user }}"
      mysql_backup_pass: "{{ db_pass }}"
      mysql_backup_db: "matomo"           # <<<<<
      # backend storage parameters
      mysql_backup_backend_use_s3: no
      mysql_backup_backend_use_scp: yes
      mysql_backup_scp_host: "pkc-back.org"
      mysql_backup_scp_identity_src: "~/.ssh/OregonCluster.pem"
      mysql_backup_scp_user: 'ubuntu'
      mysql_backup_scp_dst: '/home/ubuntu/cs/mountpoint/backup_restore/mariadb'
      # gzip and encrypt
      mysql_backup_gzip: yes
      mysql_backup_encrypt_aes: no
      # mysql_backup_encrypt_aes_key_src: "{{ playbook_dir }}/files/aes256.bkp.key"
      # other
      mysql_backup_save_facts_about_custom_script: yes
      mysql_backup_logfile: "/var/log/mysql-backup.log"
      tags: [ backup, mysql ]
      mysql_backup_archive_prefix: "{{ inventory_hostname }}-{{ mysql_backup_db }}"
    #
    #
    # Ansible role to create cronjob
    #
    - role: freehck.crontask
      crontask_file: "backup-matomo"
      crontask_name: "backup database matomo"
      crontask_hour: "*"
      crontask_minute: "1"
      crontask_job: "{{ mysql_backup_last_generated_custom_script }}"
      crontask_user: "root"
      crontask_commented_out: false
      tags: [ backup, mysql ]
    #
    #
    # Ansible role to create backup script keycloak
    #
    - role: freehck.script_mysql_backup
      # mysql connection parameters
      mysql_backup_host: "{{ db_host }}"
      mysql_backup_user: "{{ db_user }}"
      mysql_backup_pass: "{{ db_pass }}"
      mysql_backup_db: "keycloak"       # <<<<<
      # backend storage parameters
      mysql_backup_backend_use_s3: no
      mysql_backup_backend_use_scp: yes
      mysql_backup_scp_host: "pkc-back.org"
      mysql_backup_scp_identity_src: "~/.ssh/OregonCluster.pem"
      mysql_backup_scp_user: 'ubuntu'
      mysql_backup_scp_dst: '/home/ubuntu/cs/mountpoint/backup_restore/mariadb'
      # gzip and encrypt
      mysql_backup_gzip: yes
      mysql_backup_encrypt_aes: no
      # mysql_backup_encrypt_aes_key_src: "{{ playbook_dir }}/files/aes256.bkp.key"
      # other
      mysql_backup_save_facts_about_custom_script: yes
      mysql_backup_logfile: "/var/log/mysql-backup.log"
      tags: [ backup, mysql ]
      mysql_backup_archive_prefix: "{{ inventory_hostname }}-{{ mysql_backup_db }}"
    #
    #
    # Ansible role to create cronjob
    #
    - role: freehck.crontask
      crontask_file: "backup-keycloak"
      crontask_name: "backup database keycloak"
      crontask_hour: "*"
      crontask_minute: "1"
      crontask_job: "{{ mysql_backup_last_generated_custom_script }}"
      crontask_user: "root"
      crontask_commented_out: false
      tags: [ backup, mysql ]
    #
    #
    # Ansible role to create backup script - gitea
    #
    - role: freehck.script_mysql_backup
      # mysql connection parameters
      mysql_backup_host: "{{ db_host }}"
      mysql_backup_user: "{{ db_user }}"
      mysql_backup_pass: "{{ db_pass }}"
      mysql_backup_db: "gitea"              # <<<<<
      # backend storage parameters
      mysql_backup_backend_use_s3: no
      mysql_backup_backend_use_scp: yes
      mysql_backup_scp_host: "pkc-back.org"
      mysql_backup_scp_identity_src: "~/.ssh/OregonCluster.pem"
      mysql_backup_scp_user: 'ubuntu'
      mysql_backup_scp_dst: '/home/ubuntu/cs/mountpoint/backup_restore/mariadb'
      # gzip and encrypt
      mysql_backup_gzip: yes
      mysql_backup_encrypt_aes: no
      # mysql_backup_encrypt_aes_key_src: "{{ playbook_dir }}/files/aes256.bkp.key"
      # other
      mysql_backup_save_facts_about_custom_script: yes
      mysql_backup_logfile: "/var/log/mysql-backup.log"
      tags: [ backup, mysql ]
      mysql_backup_archive_prefix: "{{ inventory_hostname }}-{{ mysql_backup_db }}"
    #
    #
    # Ansible role to create cronjob gitea
    #
    - role: freehck.crontask
      crontask_file: "backup-gitea"
      crontask_name: "backup database gitea"
      crontask_hour: "*"
      crontask_minute: "1"
      crontask_job: "{{ mysql_backup_last_generated_custom_script }}"
      crontask_user: "root"
      crontask_commented_out: false
      tags: [ backup, mysql ]      

    #
    #
    # Ansible role to create cronjob image backup file
    # cron entry 1 * * * * root /opt/scripts/cs-backup-image.sh -w /home/ubuntu/cs/mountpoint -p pkc-dev.org -1 pkc-back.org -2 /etc/mysql_backup/id_rsa.pem -3 ubuntu -4 /home/ubuntu/cs/mountpoint/backup_restore/mediawiki
    - role: freehck.crontask
      crontask_file: "backup-image"
      crontask_name: "backup image mediawiki"
      crontask_hour: "*"
      crontask_minute: "1"
      crontask_job: "/opt/scripts/cs-backup-image.sh -w /home/ubuntu/cs/mountpoint -p {{ inventory_hostname }} -1 {{ backup_scp_host }} -2 /etc/mysql_backup/id_rsa.pem -3 {{ backup_scp_user }} -4 /home/ubuntu/cs/mountpoint/backup_restore/mediawiki >>/var/log/mysql-backup.log 2>&1"
      crontask_user: "root"
      crontask_commented_out: false
      tags: [ backup, mysql ]    
