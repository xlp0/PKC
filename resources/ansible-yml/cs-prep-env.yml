---
- name: install and provisioning dockers PKC Server
  hosts: all
  become: yes
  gather_facts: no
  vars:
    - docker_version: "latest"
    - retention: 1

  tasks:
  - name: Prepare .env file, based on hosts file, copy to target
    delegate_to: localhost
    copy: 
      src: ../../config-template/.env-template
      dest: ../../.env

  - name: .env, edit 1
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../.env
      regexp: '#YOUR_DOMAIN#'
      replace: '{{ hostvars[inventory_hostname].domain }}'

  - name: .env, edit 2
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../.env
      regexp: '#YOUR_DEFAULT_TRANSPORT#'
      replace: '{{ hostvars[inventory_hostname].default_transport }}'

  - name: .env, edit 3
    delegate_to: localhost
    ansible.builtin.replace:
      path: ../../.env
      regexp: '#YOUR_EMAIL_ADDRESS#'
      replace: '{{ hostvars[inventory_hostname].email }}'
    

  ## Maintain only last x days retention, on agent server
  # - name: Backup retention "{{ hostvars[inventory_hostname].retention }}" days
  #   local_action: 
  #     command: find {{ ansible_env.PWD }}/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files

  # - name: Retention mysql backup to {{ retention }} day(s) on localhost
  #   delegate_to: localhost
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention mysql backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention image backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mediawiki -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: debug
  #   debug:
  #     var: output

  # - name: debug-for src {{ hostvars[inventory_hostname].retention }}
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'src'"

  # - name: debug-for dst
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'dst'"

  ## Maintain only last x days retention
  # - name: Backup retention {{ retention }} days
  #   local_action: command find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files
  
  # - name: debug
  #   debug:
  #     var: local_files

  # - name: Create group
  #   group:
  #     name: "docker"
  #     state: present

  # - name: Adding user {{ ansible_user }}
  #   user: name="{{ ansible_user }}"
  #         groups=docker
  #         append=yes
  # - name: Ubuntu Installation Process
  #   block:
  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install nginx"
  #     apt:
  #       name: ['nginx','haveged']
  #       state: latest

  #   - name: Install aptitude using apt
  #     apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  #   - name: Install required system packages
  #     apt: name={{ item }} state=latest update_cache=yes
  #     loop: [ 'apt-transport-https', 'ca-certificates ', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'unzip']

  #   - name: Add Docker GPG apt Key
  #     apt_key:
  #       url: https://download.docker.com/linux/ubuntu/gpg
  #       state: present

  #   - name: Add Docker Repository
  #     apt_repository:
  #       repo: deb https://download.docker.com/linux/ubuntu bionic stable
  #       state: present

  #   - name: Update apt and install docker-ce
  #     apt: update_cache=yes name=docker-ce state=latest

  #   - name: Install Docker Module for Python
  #     pip:
  #       name: 
  #         - docker
  #         - docker-compose

  #   - name: install docker compose    
  #     get_url:
  #       url: https://github.com/docker/compose/releases/download/1.27.3/docker-compose-Linux-x86_64
  #       dest: /usr/local/bin/docker-compose
  #       mode: 755

  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install mysql client for backup/restore support"
  #     apt:
  #       name: ['mysql-client']
  #       state: present