---
# This playbook backups all mysql databases into separate files.
#
# How to execute on project root folder
# ansible-playbook -i ./resources/config/hosts-restore ./resources/ansible-yml/cs-restore-remote.yml
# 
#
- name: restore data
  hosts: all
  gather_facts: yes
  become: yes
  become_user: root
  vars:
    - pkc_install_root_dir: "/home/ubuntu/cs/"
    - src_server: "pkc-back"
    - dst_server: "pkc-ops"

  tasks:
  - name: Get backup latest file list set
    block:
    - name: Get database backup file
      find:
        paths: "{{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb/"
        patterns: '*my_wiki*'
      register: found_files
    
    - name: Get database latest backup file path
      set_fact:
        db_wiki_backup_file_path: "{{ found_files.files | sort(attribute='mtime',reverse=true) | first }}"

    - name: Get database latest backup file
      set_fact:
        db_wiki_backup_file: "{{ db_wiki_backup_file_path.path | basename }}"

    - name: Get latest image backup file
      find:
        paths: "{{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mediawiki/"
        patterns: '*image*'
      register: found_files
    
    - name: Get latest image backup file path
      set_fact:
        img_wiki_backup_file_path: "{{ found_files.files | sort(attribute='mtime',reverse=true) | first }}"
        # delegate_to: "{{ item }}"
        # with_items: "{{ play_hosts }}"

    - name: Get latest image backup file
      set_fact:
        img_wiki_backup_file: "{{ img_wiki_backup_file_path.path | basename }}"
        # delegate_to: "{{ item }}"
        # with_items: "{{ play_hosts }}"
        
    - name: print file names without path - image backup
      debug:
        msg: "{{ img_wiki_backup_file }}"

    - name: print file names without path - database backup
      debug:
        msg: "{{ db_wiki_backup_file }}"

    when: "inventory_hostname|string == src_server"
    run_once: yes
    become: true
    become_user: root
    ignore_errors: yes
  
  - name: Get backup latest file from {{ src_server }} into master
    block:
    # Fetch db-file from source
    - name: Fetch the db file from the "{{ src_server }}" to master
      fetch: src=/{{ pkc_install_root_dir }}mountpoint/backup_restore/mariadb/{{ db_wiki_backup_file }} dest=backup/ flat=yes

    # Fetch image-file from source
    - name: Fetch the image file from the "{{ src_server }}" to master
      fetch: src=/{{ pkc_install_root_dir }}mountpoint/backup_restore/mediawiki/{{ img_wiki_backup_file }} dest=backup/ flat=yes

    when: "inventory_hostname|string == src_server"
    run_once: yes
    become: true
    become_user: root
    ignore_errors: yes

  - name: Fetch backup latest file to {{ dst_server }} from master
    block:
    - name: Fetch the db file from the master to "{{ dst_server }}"
      copy: src=backup/{{ db_wiki_backup_file }} dest={{ pkc_install_root_dir }}mountpoint/backup_restore/mariadb/

    - name: Fetch the image file from the master to "{{ dst_server }}"
      copy: src=backup/{{ img_wiki_backup_file }} dest={{ pkc_install_root_dir }}mountpoint/backup_restore/mediawiki/

    when: "inventory_hostname|string == dst_server"
    become: true
    become_user: root
    ignore_errors: yes

  ## Perform scripts
  - name: Perform database and image restore
    ansible.builtin.shell: "./cs-restore.sh -m mountpoint -d {{ db_wiki_backup_file }} -i {{ img_wiki_backup_file }} -t my_wiki > ./restore_report.log"
    args:
      chdir: "{{ pkc_install_root_dir }}"
    when: "inventory_hostname|string == dst_server"
    

  ## Download result log
  - name: Fetch log result file from "{{ dst_server }}" to master
    fetch: src=/{{ pkc_install_root_dir }}restore_report.log dest=backup/ flat=yes
    when: "inventory_hostname|string == dst_server"


  