#
# cd /home/pi/PKC && ansible-playbook -i ./resources/config/hosts ./resources/ansible-yml/cs-test.yml
#
# ---
# - name: install and provisioning dockers PKC Server
#   hosts: all
#   become: yes
#   gather_facts: yes
#   vars:
#     - docker_version: "latest"
#     - retention: 1
#     - db_wiki_backup_file: gasing-my_wiki-20220418T210627.sql.gz
#     - dir_moodle_backup_file: 
#     - db_moodle_backup_file: 
#     - img_wiki_backup_file: gasing-20220418T210627-image.tar.gz

#   tasks:
- name: print out hosts architectures
  hosts: all
  gather_facts: True
  become: yes
  tasks:
    - debug: var=ansible_architecture

    - name: Set Letsencrypt Cronjob for Certificate Auto Renewal
      cron: name=letsencrypt_renewal special_time=monthly job="/usr/bin/certbot renew"
      when: ansible_facts['os_family'] == "Debian"

    # - name: Download mountpoint file/amd64
    #   get_url:
    #     url: https://res.posco.id/mountpoint.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #   when: ansible_architecture == 'x86_64'
    #   async: 600 # Maximum allowed time in Seconds
    #   poll: 15 # Polling Interval in Seconds
    #   register: scrout

    # - name: Uploading Configuration Files, starting services.
    #   block: 
    #   - name: copy NGINX Configuration Files
    #     copy:
    #       src: "{{ item.src }}"
    #       dest: "{{ item.dest }}"
    #       remote_src: false
    #     loop:
    #       - {src: '../../config/git.conf', dest: '/etc/nginx/sites-enabled/git.conf'}
    #       - {src: '../../config/mtm.conf', dest: '/etc/nginx/sites-enabled/mtm.conf'}
    #       - {src: '../../config/pkc.conf', dest: '/etc/nginx/sites-enabled/pkc.conf'}
    #       - {src: '../../config/pma.conf', dest: '/etc/nginx/sites-enabled/pma.conf'}
    #       - {src: '../../config/vs.conf', dest: '/etc/nginx/sites-enabled/vs.conf'}
    #       - {src: '../../config/kck.conf', dest: '/etc/nginx/sites-enabled/kck.conf'}
    #       - {src: '../../config/mdl.conf', dest: '/etc/nginx/sites-enabled/mdl.conf'}
    #       - {src: '../../config/swg.conf', dest: '/etc/nginx/sites-enabled/swg.conf'}
    #       - {src: '../../config/qtux.conf', dest: '/etc/nginx/sites-enabled/qtux.conf'}
    #       - {src: '../../config/reverse-proxy.conf', dest: '/etc/nginx/sites-enabled/reverse-proxy.conf'}
    #     become: true
    #     when: ansible_facts['os_family'] == "Debian"


        
    # - name: Download mountpoint file/armv7l
    #   get_url:
    #     url: http://res.pkc.pub/mountpoint-arm7l.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #   when: ansible_architecture == 'armv7l'

    # - name: Download mountpoint file/arm64
    #   get_url:
    #     url: http://res.pkc.pub/mountpoint-arm64.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #   when: ansible_architecture == 'aarch64'
    
    # - name: Download mountpoint file/amd64
    #   get_url:
    #     url: http://res.pkc.pub/mountpoint-arm.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #   when: ansible_architecture == 'x86_64'

    # - name: Download mountpoint file-nonARM
    #   get_url:
    #     url: http://res.pkc.pub/mountpoint.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #     when: ansible_architecture != 'aarch64'

    # - name: Download mountpoint file-ARM
    #   get_url:
    #     url: http://res.pkc.pub/mountpoint-arm64.tar.gz
    #     dest: "/home/{{ ansible_user }}/cs"
    #     when: ansible_architecture = 'aarch64'

    # - name: Extract Mountpoint
    #   shell: "tar -xvf ./mountpoint.tar.gz"
    #   args:
    #     chdir: "/home/{{ ansible_user }}/cs"


  # - name: Perform restore on target server
  #   block:
  #   - name: Perform database and image restore
  #     ansible.builtin.shell: "./cs-restore.sh -m mountpoint -d {{ db_wiki_backup_file }} -i {{ img_wiki_backup_file }} -t my_wiki > ./restore_report.log"
  #     args:
  #       chdir: "{{ pkc_install_root_dir }}"

  #   - name: Perform moodle folder restore
  #     ansible.builtin.shell: "tar -xzvf ./backup_restore/{{ dir_moodle_backup_file }} ./moodledata"
  #     args:
  #       chdir: "{{ pkc_install_root_dir }}mountpoint"

  #   - name: Perform moodle database restore
  #     community.docker.docker_container_exec:
  #       container: xlp_mariadb
  #       argv:
  #         - /bin/bash
  #         - "-c"
  #         - "gunzip < /mnt/backup_restore/mariadb/{{ db_moodle_backup_file }} | mysql -u root -D moodle -psecret; exit $?"
  #       chdir: /root
  #     register: result

  #   - name: Print stderr lines
  #     debug:
  #       var: result.stderr_lines

  #   run_once: yes
  #   become: true
  #   become_user: root
  #   ignore_errors: yes

  # - name: Prepare .env file, based on hosts file, copy to target
  #   delegate_to: localhost
  #   copy: 
  #     src: ../../config-template/.env-template
  #     dest: ../../.env

  # - name: Prepare moodle media backup
  #   command: "chdir={{ pkc_install_root_dir }}mountpoint/ tar -czvf ./backup_restore/{{ ansible_host }}-moodledata-{{ ansible_date_time.iso8601_basic_short }}.tar.gz ./moodledata"
  #   register: ls_result

  # - name: print ls resut
  #   debug:
  #     var: ls_result

  # - name: Perform moodle database restore
  #   community.docker.docker_container_exec:
  #     container: xlp_mariadb
  #     argv:
  #       - /bin/bash
  #       - "-c"
  #       - "gunzip < /mnt/backup_restore/mariadb/gasing-moodle-20220417T000506.sql.gz | mysql -u root -D moodle -psecret; exit $?"
  #     chdir: /root
  #   register: result

  # - name: Print stderr lines
  #   debug:
  #     var: result.stderr_lines


  # - name: Backup retention "{{ hostvars[inventory_hostname].retention }}" days
  #   local_action: command find ../../backup -type f -mtime +{{ retention }} -delete
  #   register: local_files

  # - name: .env, edit 1
  #   delegate_to: localhost
  #   ansible.builtin.replace:
  #     path: ../../.env
  #     regexp: '#YOUR_DOMAIN#'
  #     replace: '{{ hostvars[inventory_hostname].domain }}'

  # - name: .env, edit 2
  #   delegate_to: localhost
  #   ansible.builtin.replace:
  #     path: ../../.env
  #     regexp: '#YOUR_DEFAULT_TRANSPORT#'
  #     replace: '{{ hostvars[inventory_hostname].default_transport }}'

  # - name: .env, edit 3
  #   delegate_to: localhost
  #   ansible.builtin.replace:
  #     path: ../../.env
  #     regexp: '#YOUR_EMAIL_ADDRESS#'
  #     replace: '{{ hostvars[inventory_hostname].email }}'
    

  ## Maintain only last x days retention, on agent server
  # - name: Backup retention "{{ hostvars[inventory_hostname].retention }}" days
  #   local_action: 
  #     command: find {{ ansible_env.PWD }}/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files

  # - name: Retention mysql backup to {{ retention }} day(s) on localhost
  #   delegate_to: localhost
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention mysql backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mariadb -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: Retention image backup to {{ retention }} day(s)
  #   command: "find {{ ansible_env.PWD }}/cs/mountpoint/backup_restore/mediawiki -type f -mtime +{{ retention }} -delete"
  #   become: yes
  #   register: output

  # - name: debug
  #   debug:
  #     var: output

  # - name: debug-for src {{ hostvars[inventory_hostname].retention }}
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'src'"

  # - name: debug-for dst
  #   debug:
  #     var: hostvars[inventory_hostname].brl
  #   when: "hostvars[inventory_hostname].brl == 'dst'"

  ## Maintain only last x days retention
  # - name: Backup retention {{ retention }} days
  #   local_action: command find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete # pwd #command "find /home/pi/PKC/backup -type f -mtime +{{ retention }} -delete"
  #   register: local_files
  
  # - name: debug
  #   debug:
  #     var: local_files

  # - name: Create group
  #   group:
  #     name: "docker"
  #     state: present

  # - name: Adding user {{ ansible_user }}
  #   user: name="{{ ansible_user }}"
  #         groups=docker
  #         append=yes
  # - name: Ubuntu Installation Process
  #   block:
  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install nginx"
  #     apt:
  #       name: ['nginx','haveged']
  #       state: latest

  #   - name: Install aptitude using apt
  #     apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  #   - name: Install required system packages
  #     apt: name={{ item }} state=latest update_cache=yes
  #     loop: [ 'apt-transport-https', 'ca-certificates ', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'unzip']

  #   - name: Add Docker GPG apt Key
  #     apt_key:
  #       url: https://download.docker.com/linux/ubuntu/gpg
  #       state: present

  #   - name: Add Docker Repository
  #     apt_repository:
  #       repo: deb https://download.docker.com/linux/ubuntu bionic stable
  #       state: present

  #   - name: Update apt and install docker-ce
  #     apt: update_cache=yes name=docker-ce state=latest

  #   - name: Install Docker Module for Python
  #     pip:
  #       name: 
  #         - docker
  #         - docker-compose

  #   - name: install docker compose    
  #     get_url:
  #       url: https://github.com/docker/compose/releases/download/1.27.3/docker-compose-Linux-x86_64
  #       dest: /usr/local/bin/docker-compose
  #       mode: 755

  #   - name: "apt-get update"
  #     apt:
  #       update_cache: yes
  #       cache_valid_time: 3600

  #   - name: "install mysql client for backup/restore support"
  #     apt:
  #       name: ['mysql-client']
  #       state: present