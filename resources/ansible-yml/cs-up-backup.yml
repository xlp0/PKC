---
- name: install and provisioning dockers PKC Server
  hosts: all
  become: yes

  tasks:
  - name: "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 3600
#
# NGINX Configuration files
#
  - name: "install nginx"
    apt:
      name: ['nginx']
      state: latest

  - name: copy NGINX Configuration Files
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: false
    loop:
      - {src: './config/git.conf', dest: '/etc/nginx/sites-enabled/git.conf'}
      - {src: './config/mtm.conf', dest: '/etc/nginx/sites-enabled/mtm.conf'}
      - {src: './config/pkc.conf', dest: '/etc/nginx/sites-enabled/pkc.conf'}
      - {src: './config/pma.conf', dest: '/etc/nginx/sites-enabled/pma.conf'}
      - {src: './config/vs.conf', dest: '/etc/nginx/sites-enabled/vs.conf'}
      - {src: './config/kck.conf', dest: '/etc/nginx/sites-enabled/kck.conf'}
      - {src: './config/reverse-proxy.conf', dest: '/etc/nginx/sites-enabled/reverse-proxy.conf'}
    become: true

  - name: restart nginx
    service: name=nginx state=restarted

  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
  
  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates ', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'unzip']

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest

  - name: Install Docker Module for Python
    pip:
      name: 
        - docker
        - docker-compose

  - name: create PKC docker-compose directory
    file:
      path: ./cs
      state: directory

  - name: create PKC mysql init folder
    file:
      path: ./cs/mysql-init
      state: directory

  - name: Upload docker-compose
    ansible.builtin.copy:
      src: ./config-template/docker-compose.yml
      dest: ./cs

  - name: Upload initdb script
    ansible.builtin.copy:
      src: ./config-template/init.sql
      dest: ./cs/mysql-init

  - name: Upload scripts
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: false
      mode: u=rwx,g=rx,o=rx

    loop:
      - {src: './script/cs-backup.sh', dest: './cs/cs-backup.sh'}
      - {src: './script/cs-restore.sh', dest: './cs/cs-restore.sh'}
      - {src: './script/cs-offsite-restore.sh', dest: './cs/cs-offsite-restore.sh'}
      - {src: './script/update-sw.sh', dest: './cs/update-sw.sh'}
      - {src: './script/mtm-sql.sh', dest: './cs/mtm-sql.sh'}
      - {src: './.env', dest: './cs/.env'}
    become: true

  - name: Extract mountpoint.tar.gz
    ansible.builtin.unarchive:
      src: ./mountpoint.tar.gz
      dest: "{{ ansible_env.PWD }}/cs"

  - name: Upload LocalSettings.php
    copy:
      src: "./config/LocalSettings.php"
      dest: "./cs/mountpoint"
      remote_src: false

  - name: copy Application Configuration Files
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: false
    loop:
      - {src: "./config/LocalSettings.php", dest: './cs/mountpoint'}
      - {src: './config/config.ini.php', dest: './cs/mountpoint/matomo/config'}
      - {src: './config/update-mtm-config.sql', dest: './cs/mountpoint/backup_restore/mariadb'}
      - {src: './config/app.ini', dest: './cs/mountpoint/gitea/gitea/conf'}
    become: true
#
# User data management
#
  - name: add user mtm
    ansible.builtin.user:
      name: mtm
      comment: matomo docker account
      uid: 1001
      state: present

  - name: add user www-data
    ansible.builtin.user:
      name: www-data
      comment: matomo docker account
      uid: 33
      state: present

  - name: Change Matomo Ownership Folder
    ansible.builtin.file:
      path: ./cs/mountpoint/matomo
      state: directory
      recurse: yes
      owner: mtm
#
# Docker Pre Installation, enable docker without sudo
#
  - name: Create group
    group:
      name: "docker"
      state: present

  - name: Adding user ubuntu
    user: name=ubuntu
          groups=docker
          append=yes
#
# Docker Compose Statement
# 
  - name: install docker compose    
    get_url:
      url: https://github.com/docker/compose/releases/download/1.27.3/docker-compose-Linux-x86_64
      dest: /usr/local/bin/docker-compose
      mode: 755

  - name: "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 3600

  - name: "install mysql client for backup/restore support"
    apt:
      name: ['mysql-client']
      state: present

  - name: Create and start PKC services
    community.docker.docker_compose:
      project_src: cs
      timeout: 15
    register: output
    ignore_errors: yes

  - name: Execute the Matomo Keycloak Config 
    command: "sh {{ ansible_env.PWD }}/cs/mtm-sql.sh" 

  - name: Execute the update script 
    command: "sh {{ ansible_env.PWD }}/cs/update-sw.sh"