---
- name: install and provisioning dockers PKC Server
  hosts: all
  become: yes
  vars:
    - docker_version: "latest"

  tasks:
  - name: Ubuntu Installation Process
    block:
    - name: "apt-get update"    
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: "install nginx"
      apt:
        name: ['nginx','haveged']
        state: latest

    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates ', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', 'unzip']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: 
          - docker
          - docker-compose

    - name: install docker compose    
      get_url:
        url: https://github.com/docker/compose/releases/download/1.27.3/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 755

    - name: "apt-get update"
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: "install mysql client for backup/restore support"
      apt:
        name: ['mysql-client']
        state: present

    when: ansible_facts['os_family'] == "Debian"
    become: true
    become_user: root
    ignore_errors: yes

  - name: RedHat Installation Process
    block:
    - name: Add signing key
      ansible.builtin.rpm_key:
        key: "https://download.docker.com/linux/centos/gpg"
        state: present

    - name: Configure Docker-CE repository.
      copy:
        src: ./config-template/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        owner: root
        group: root
        mode: 0644

    - name: Configure Docker repository.
      copy:
        src: ./config-template/docker.repo
        dest: /etc/yum.repos.d/docker.repo
        owner: root
        group: root
        mode: 0644

    - name: Install Docker
      ansible.builtin.yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python36
          - nginx
          - mysql
        state: latest
        update_cache: true

    - name: Execute python3.6 pip install
      ansible.builtin.shell: python3.6 -m pip install --upgrade pip
      become: yes

    - name: Install docker compose 
      pip: 
        name: docker-compose 
        state: present 

    - name: Add users to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Start Docker Daemon 
      systemd: 
        state: started
        enabled: yes
        name: docker

    when: ansible_facts['os_family'] == "RedHat"
    become: true
    become_user: root
    ignore_errors: yes

  - name: Uploading Configuration Files, starting services.
    block: 
    - name: copy NGINX Configuration Files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: false
      loop:
        - {src: '../../config/git.conf', dest: '/etc/nginx/sites-enabled/git.conf'}
        - {src: '../../config/mtm.conf', dest: '/etc/nginx/sites-enabled/mtm.conf'}
        - {src: '../../config/pkc.conf', dest: '/etc/nginx/sites-enabled/pkc.conf'}
        - {src: '../../config/pma.conf', dest: '/etc/nginx/sites-enabled/pma.conf'}
        - {src: '../../config/vs.conf', dest: '/etc/nginx/sites-enabled/vs.conf'}
        - {src: '../../config/kck.conf', dest: '/etc/nginx/sites-enabled/kck.conf'}
        - {src: '../../config/mdl.conf', dest: '/etc/nginx/sites-enabled/mdl.conf'}
        - {src: '../../config/swg.conf', dest: '/etc/nginx/sites-enabled/swg.conf'}
        - {src: '../../config/qtux.conf', dest: '/etc/nginx/sites-enabled/qtux.conf'}
        - {src: '../../config/reverse-proxy.conf', dest: '/etc/nginx/sites-enabled/reverse-proxy.conf'}
      become: true
      when: ansible_facts['os_family'] == "Debian"

    - name: copy NGINX Configuration Files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: false
      loop:
        - {src: '../../config/git.conf', dest: '/etc/nginx/conf.d/git.conf'}
        - {src: '../../config/mtm.conf', dest: '/etc/nginx/conf.d/mtm.conf'}
        - {src: '../../config/pkc.conf', dest: '/etc/nginx/conf.d/pkc.conf'}
        - {src: '../../config/pma.conf', dest: '/etc/nginx/conf.d/pma.conf'}
        - {src: '../../config/vs.conf', dest: '/etc/nginx/conf.d/vs.conf'}
        - {src: '../../config/kck.conf', dest: '/etc/nginx/conf.d/kck.conf'}
        - {src: '../../config/mdl.conf', dest: '/etc/nginx/conf.d/mdl.conf'}
        - {src: '../../config/swg.conf', dest: '/etc/nginx/conf.d/swg.conf'}
        - {src: '../../config/qtux.conf', dest: '/etc/nginx/conf.d/qtux.conf'}
        - {src: '../../config/reverse-proxy.conf', dest: '/etc/nginx/conf.d/reverse-proxy.conf'}
      become: true
      when: ansible_facts['os_family'] == "RedHat"

    - name: create PKC docker-compose directory
      file:
        path: ./cs
        state: directory

    - name: create PKC mysql init folder
      file:
        path: ./cs/mysql-init
        state: directory

    - name: Upload docker-compose
      ansible.builtin.copy:
        src: ../../config-template/docker-compose-arm64.yml
        dest: ./cs/docker-compose.yml
      when: ansible_architecture == 'aarch64'

    - name: Upload docker-compose
      ansible.builtin.copy:
        src: ../../config-template/docker-compose.yml
        dest: ./cs
      when: ansible_architecture == 'x86_64'

    # - name: Upload initdb script
    #   ansible.builtin.copy:
    #     src: ../../config-template/init.sql
    #     dest: ./cs/mysql-init

    - name: Upload scripts and config
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: false
        mode: u=rwx,g=rx,o=rx

      loop:
        - {src: '../script/cs-backup.sh', dest: './cs/cs-backup.sh'}
        - {src: '../script/cs-restore.sh', dest: './cs/cs-restore.sh'}
        - {src: '../script/cs-offsite-restore.sh', dest: './cs/cs-offsite-restore.sh'}
        - {src: '../script/update-sw.sh', dest: './cs/update-sw.sh'}
        - {src: '../script/mtm-sql.sh', dest: './cs/mtm-sql.sh'}
        - {src: '../../.env', dest: './cs/.env'}
      become: true

    - name: Download mountpoint file/arm64
      get_url:
        url: https://res.posco.id/mountpoint-arm64.tar.gz
        dest: "/home/{{ ansible_user }}/cs/mountpoint.tar.gz"
      when: ansible_architecture == 'aarch64'
      async: 1200 # Maximum allowed time in Seconds
      poll: 15 # Polling Interval in Seconds
      register: scrout
    
    - name: Download mountpoint file/amd64
      get_url:
        url: https://res.posco.id/mountpoint.tar.gz
        dest: "/home/{{ ansible_user }}/cs"
      when: ansible_architecture == 'x86_64'
      async: 1200 # Maximum allowed time in Seconds
      poll: 15 # Polling Interval in Seconds
      register: scrout

    - name: Extract Mountpoint
      shell: "tar -xvf ./mountpoint.tar.gz"
      args:
        chdir: "/home/{{ ansible_user }}/cs"
        warn: no

    - name: Upload LocalSettings.php and other setting
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: no
      loop:
        - {src: '../../config/LocalSettings.php', dest: './cs/mountpoint/LocalSettings.php'}
        - {src: '../../config-template/timezone', dest: './cs/mountpoint/timezone'}
        - {src: '../../config-template/localtime', dest: './cs/mountpoint/localtime'}

    - name: copy Application Configuration Files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: no
      loop:
        - {src: '../../config/config.ini.php', dest: './cs/mountpoint/matomo/config'}
        - {src: '../../config/update-mtm-config.sql', dest: './cs/mountpoint/backup_restore/mariadb'}
        - {src: '../../config/app.ini', dest: './cs/mountpoint/gitea/gitea/conf'}
        - {src: '../../config-template/uploads.ini', dest: './cs/mountpoint/uploads.ini'}
      become: true

    - name: add user mtm
      ansible.builtin.user:
        name: mtm
        comment: matomo docker account
        uid: 1001
        state: present

    - name: add user www-data
      ansible.builtin.user:
        name: www-data
        comment: matomo docker account
        uid: 33
        state: present

    - name: Change Matomo Ownership Folder
      ansible.builtin.file:
        path: ./cs/mountpoint/matomo
        state: directory
        recurse: yes
        owner: mtm

    - name: Change Images Ownership Folder
      ansible.builtin.file:
        path: ./cs/mountpoint/images
        state: directory
        recurse: yes
        owner: www-data

    - name: Change Widget Ownership Folder
      ansible.builtin.file:
        path: ./cs/mountpoint/extensions
        state: directory
        recurse: yes
        owner: www-data

    - name: Create group
      group:
        name: "docker"
        state: present

    - name: Adding user {{ ansible_user }}
      user: name="{{ ansible_user }}"
            groups=docker
            append=yes

    when: ansible_facts['os_family'] == "Debian" or ansible_facts['os_family'] == "RedHat"
    become: true
    become_user: root
    ignore_errors: yes

